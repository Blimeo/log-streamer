services:
  # Distributor service
  distributor:
    build: .
    ports:
      - "8080:8080"    # Ingest API
      - "9100:9100"    # prometheus metrics endpoint
    environment:
      - PORT=8080
      - METRICS_ADDR=:9100
      - INGEST_BUFFER_SIZE=10000
      - PER_ANALYZER_QUEUE_SIZE=10000
      - SENDER_RETRIES=3
      - SENDER_TIMEOUT_MS=500
      - HEALTH_CHECK_INTERVAL_SEC=2
      - HEALTH_CHECK_TIMEOUT_SEC=1
      - MAX_FAILURES=5
      - ANALYZERS=http://analyzer-1:9001=0.5,http://analyzer-2:9002=0.3,http://analyzer-3:9003=0.2
    depends_on:
      - analyzer-1
      - analyzer-2
      - analyzer-3
    networks:
      - log-streamer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 2
      start_period: 10s
    # Add resource limits and network optimizations
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    sysctls:
      - net.core.somaxconn=65535
      - net.ipv4.tcp_max_syn_backlog=65535

  # Analyzer 1
  analyzer-1:
    build:
      context: .
      dockerfile: Dockerfile.analyzer
    ports:
      - "9001:9001"
    environment:
      - PORT=9001
      - ANALYZER_ID=analyzer-1
      - PROCESSING_DELAY_MS=0
    networks:
      - log-streamer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9001/health"]
      interval: 10s
      timeout: 5s
      retries: 2
      start_period: 5s

  # Analyzer 2
  analyzer-2:
    build:
      context: .
      dockerfile: Dockerfile.analyzer
    ports:
      - "9002:9002"
    environment:
      - PORT=9002
      - ANALYZER_ID=analyzer-2
      - PROCESSING_DELAY_MS=0
    networks:
      - log-streamer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9002/health"]
      interval: 10s
      timeout: 5s
      retries: 2
      start_period: 5s

  # Analyzer 3
  analyzer-3:
    build:
      context: .
      dockerfile: Dockerfile.analyzer
    ports:
      - "9003:9003"
    environment:
      - PORT=9003
      - ANALYZER_ID=analyzer-3
      - PROCESSING_DELAY_MS=0
    networks:
      - log-streamer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9003/health"]
      interval: 10s
      timeout: 5s
      retries: 2
      start_period: 5s

  # Emitter (load generator)
  emitter:
    build:
      context: .
      dockerfile: Dockerfile.emitter
    environment:
      - TARGET_URL=http://distributor:8080/ingest
      - RATE=10000
      - CONCURRENCY=20
      - PACKET_SIZE=5
      - EMITTER_ID=emitter-1
    depends_on:
      - distributor
    networks:
      - log-streamer-network
    restart: "no"
    # Add resource limits to prevent resource exhaustion
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    # Add sysctls for better network performance
    sysctls:
      - net.core.somaxconn=65535
      - net.ipv4.tcp_max_syn_backlog=65535

  # Prometheus service
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - log-streamer-network
    depends_on:
      - distributor

  # Grafana service
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin   # change
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/provisioning/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - log-streamer-network
    depends_on:
      - prometheus

networks:
  log-streamer-network:
    driver: bridge

volumes:
  log-data:
    driver: local
  grafana-storage:
